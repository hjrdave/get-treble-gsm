{"componentChunkName":"component---src-templates-post-template-jsx","path":"/docs/scoped-global-state","result":{"data":{"markdownRemark":{"html":"<h1>Scoped Global State</h1>\n<p>The primary goal of Treble is to provide a quick setup and easy way to manage global state.  That being said there will always be scenerios where more advance functionality will be needed.  One of these scenerios would be having the ability to scope global state to specific components.  An example of this is a complex UI component that has many child components that need to share state.  Treble allows this to easily be done with it's Scoped Global State feature.  Setup is similar to setting up global state for the app, with a couple extra steps.</p>\n<h2>Create Store</h2>\n<p>Create a <code class=\"language-text\">Store.js</code> file in the desired component folder structure. Unlike our initial Store setup we will add the options parameter to this one. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> <span class=\"token comment\">//scoped context</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Create Scoped Context</h2>\n<p>Treble uses React's native <a href=\"https://reactjs.org/docs/context.html\">Context API</a> to manage global state under the hood. This means each instance of the Treble container has to utilize a unique instance of React Context. When no custom Context is passed to Treble it utilizes its default Context instance.  Scoped Treble components need a custom Context to work correctly.</p>\n<p>You can create a scoped Context for the new <code class=\"language-text\">Store.js</code> by importing the <code class=\"language-text\">useScopedTreble</code> hook into the Store. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In your <code class=\"language-text\">Store.js</code> file assign <code class=\"language-text\">useScopedTreble</code> to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pass the <code class=\"language-text\">scopedContext</code> variable to the <code class=\"language-text\">Store</code> component's <code class=\"language-text\">options.context</code> parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> scopedContext\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span> </code></pre></div>\n<p>The new <code class=\"language-text\">Store.js</code> is now set up as a scoped Store.</p>\n<h2>Create Custom Treble Hook</h2>\n<p>Now that a scoped Store is set up a custom Treble hook must be created.  This hook will only subscribe to this scoped Store.</p>\n<p>Import <code class=\"language-text\">useTreble</code> hook into your new scoped <code class=\"language-text\">Store.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a new custom hook variable and pass the <code class=\"language-text\">scopedContext</code> variable to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useNewTreble</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span>scopedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>You can call the new hook anything you want, BUT it must start with <em>use</em>. See <a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a></p>\n</blockquote>\n<p>You will then need to export the custom Hook from your <code class=\"language-text\">Store.js</code> file so it is accessible to the rest of the component. Final <code class=\"language-text\">Store.js</code> should look like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useNewTreble</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span>scopedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> scopedContext\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> useNewTreble <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span> </code></pre></div>\n<h2>Wrap Components with the Treble Container</h2>\n<p>This step is the same as setting up a normal Treble container.  The only difference is the scoped <code class=\"language-text\">Store</code> component will be passed to the <code class=\"language-text\">Treble</code> component's <code class=\"language-text\">store</code> prop.  To set up the Treble container <a href=\"./setup-treble\">read here</a>.</p>\n<h2>Subscribe to Scoped Store</h2>\n<p>This is the same as subscribing to the main <code class=\"language-text\">Store.js</code>. The difference is you will call the custom hook <code class=\"language-text\">useNewTreble</code> instead of the default <code class=\"language-text\">useTreble</code> hook. To subscribe to the Treble Store <a href=\"./subscribe-and-update\">read here</a>.</p>\n<h2>Subscribing to Multiple Stores</h2>\n<p>If your component is utilizing a scoped Treble there still might be a case where you also want to utilize the main App Store state. This can be done by calling both hooks.  Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useNewTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NestedComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useNewTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">          \n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is the Pokemon Trainer </span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token plain-text\">'s favorite Pokemon</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Pikachu is the Pokemon Trainer Ash's favorite Pokemon */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NestedComp<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Updating Multiple Stores</h2>\n<p>This can be done easily by giving the <code class=\"language-text\">dispatch</code> function a unique name.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useNewTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Misty'</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Psyduck'</span><span class=\"token punctuation\">,</span> dispatch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now your component has scoped global state and you can subscribe and update this state like you would the main App gobal state.  I can feel the power!</p>","frontmatter":{"date":"May 04, 2019","path":"/docs/scoped-global-state","title":"Scoped Global State"}}},"pageContext":{}}}