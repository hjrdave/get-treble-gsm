{"componentChunkName":"component---src-templates-post-template-jsx","path":"/docs/subscribe-and-update","result":{"data":{"markdownRemark":{"html":"<h1>Subscribe and Update</h1>\n<p>Once global state is setup in your app, we will want our components to be able to read and manipulate the state from the Treble Store. Treble has a simple and straightforward API for subscribing to and updating state in the Store.</p>\n<h2>Subscribing to the Store</h2>\n<p>Every component that is wrapped inside the <code class=\"language-text\">Treble</code> container component has access to the <code class=\"language-text\">useTreble</code> hook. This hook is used to get access to the state variable from the Store. </p>\n<p>First we need to import the <code class=\"language-text\">useTreble</code> hook into our component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a destructured array to get access to store variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon<span class=\"token punctuation\">,</span> pokemonGame <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can now use each store variable in your component like you would with local state.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{ pokemon } can be found in { pokemonGame }<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Mewtwo can be found in Pokemon Red --></span></code></pre></div>\n<blockquote>\n<p>Hooks MUST be called inside functional components. For more information read <a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<h2>Updating the Store</h2>\n<p>Treble provides a simple utility function called <code class=\"language-text\">updateStore</code> that can be called inside your component to update state in the Store.</p>\n<p>Import <code class=\"language-text\">updateStore</code> into your component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> updateStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">updateStore</code> function takes three parameters.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>action</strong> - Takes a string value that matches the <code class=\"language-text\">Store: [{ action: string }]</code> value. This tells Treble which value you are wanting to update.</p>\n<p><strong>value</strong> - Takes a string, object, array, or boolean value.  This value will replace the current <code class=\"language-text\">Store: [{ state: any }]</code> value.</p>\n<p><strong>dispatch</strong> - Takes a <code class=\"language-text\">dispatch</code> function from the <code class=\"language-text\">useTreble</code> hook. Dispatch is used to connect <code class=\"language-text\">updateStore</code> to the appropriate Store. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon<span class=\"token punctuation\">,</span> pokemonGame <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Pikachu'</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When the <code class=\"language-text\">updateStore</code> function is called with the appropriate parameters it will update the <code class=\"language-text\">Store</code>.</p>\n<p>And tada your app now has global state management and it is easily managed. Happy Coding!</p>","frontmatter":{"date":"May 04, 2019","path":"/docs/subscribe-and-update","title":"Subscribe and Update"}}},"pageContext":{}}}