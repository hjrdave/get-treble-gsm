{"componentChunkName":"component---src-components-templates-api-docs-api-docs-jsx","path":"/api/advanced/scoping-stores","result":{"data":{"site":{"siteMetadata":{"apiNavLinks":[{"id":0,"menuItems":[{"id":0,"path":"/api/introduction/what-is-treblegsm","text":"What is TrebleGSM?"},{"id":1,"path":"/api/introduction/getting-started","text":"Getting Started"},{"id":2,"path":"/api/introduction/managing-state","text":"Managing State"}],"section":"Introduction"},{"id":1,"menuItems":[{"id":3,"path":"/api/advanced/how-treble-gsm-works","text":"How TrebleGSM Works"},{"id":4,"path":"/api/advanced/core-concepts","text":"Core Concepts"},{"id":5,"path":"/api/advanced/extending-stores","text":"Extending Stores"},{"id":6,"path":"/api/advanced/scoping-stores","text":"Scoping Stores"},{"id":7,"path":"/api/advanced/persisting-state","text":"Persisting State"},{"id":8,"path":"/api/advanced/managing-lists","text":"Managing Lists"},{"id":9,"path":"/api/advanced/class-support","text":"Class Support"}],"section":"Advanced"},{"id":2,"menuItems":[{"id":10,"path":"/api/middleware/what-is-middleware","text":"What is Middleware?"},{"id":11,"path":"/api/middleware/middleware-data-object","text":"Middleware Data Object"}],"section":"Middleware"},{"id":3,"menuItems":[{"id":12,"path":"/api/modules/what-are-modules","text":"What are Modules?"},{"id":13,"path":"/api/modules/create-a-module","text":"Create a Module"},{"id":14,"path":"/api/modules/api-reference","text":"API Reference"}],"section":"Modules"},{"id":4,"menuItems":[{"id":15,"path":"/api/references/treble-gsm","text":"TrebleGSM"},{"id":16,"path":"/api/references/treble-core","text":"Treble Core"},{"id":17,"path":"/api/references/treble-persist","text":"Treble Persist"},{"id":18,"path":"/api/references/treble-list-manager","text":"Treble List Manager"}],"section":"API References"}]}},"markdownRemark":{"html":"<p>Creating complex React components like widgets can make state hard to maintain.  Especially when there are many nested components that need to pass state back and forth. TrebleGSM has a feature called Scoped Stores that helps alleviate this headache.</p>\n<p>Imagine having a data grid component that displays rows and has search functionality.  The data grid has a main component made up of a table header row, data rows, and search inputs.  Each one of those are separate components that live within the main component.  They all need to share state and pass it between each other.  If only local state is used, then prop drilling and lifting up state create a component full of spaghetti code üçù.  If the state is put into the App's global state then you have a bunch of state that is only used by one component bloating your App's global state and causing more complexities üò¨. With a Scoped Store we can set up a Store within a component that will only allow that component and it's nested components to subscribe to it. Allowing the component to be what it was meant to be... a component! üòé</p>\n<h3 id=\"create-scoped-store\" style=\"position:relative;\"><a href=\"#create-scoped-store\" aria-label=\"create scoped store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Scoped Store</h3>\n<p>To create a Scoped Store in our component a new instance of React Context will need to be created.</p>\n<blockquote>\n<p>Treble uses React's native <a href=\"https://reactjs.org/docs/context.html\">Context API</a> to manage global state under the hood. This means each instance of the Treble container has to utilize a unique instance of React Context. When no custom Context is passed to Treble it utilizes its default Context instance.  Scoped Treble components need a custom Context to work correctly.</p>\n</blockquote>\n<p>Create a <code class=\"language-text\">Store.js</code> file in the desired component folder structure. You can learn more about creating a Treble Store by going <a href=\"/api/introduction/getting-started\">here</a>. <code class=\"language-text\">createStore</code> takes an optional  object as a second parameter. The <code class=\"language-text\">context</code> property will need to be added to this object. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ScopedStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> context<span class=\"token operator\">:</span> <span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can create a new Context instance by importing the <code class=\"language-text\">useScopedTreble</code> hook and assigning it to a new variable called <code class=\"language-text\">Context</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useScopedTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span>\n\n<span class=\"token keyword\">const</span> Context <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pass the new <code class=\"language-text\">Context</code> variable to the <code class=\"language-text\">createStore</code> option property <code class=\"language-text\">context</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useScopedTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span>\n\n<span class=\"token keyword\">const</span> Context <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ScopedStore <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> context<span class=\"token operator\">:</span> Context <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The Store is now a Scoped Store! üò∏</p>\n<h3 id=\"create-scoped-usetreble-hook\" style=\"position:relative;\"><a href=\"#create-scoped-usetreble-hook\" aria-label=\"create scoped usetreble hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Scoped useTreble Hook</h3>\n<p>Now that a Scoped Store is set up, a custom <code class=\"language-text\">useTreble</code> hook must be created.  This hook will only subscribe to this Store.</p>\n<p>Import the <code class=\"language-text\">useTreble</code> hook into <code class=\"language-text\">Store.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a new custom hook variable and pass the <code class=\"language-text\">scopedContext</code> variable to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> useScopedStore <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span>scopedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>You can call the new hook anything you want, <strong>BUT</strong> it must start with <em>use</em>. See <a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a></p>\n</blockquote>\n<p>You will then need to export the custom Hook from your <code class=\"language-text\">Store.js</code> file so it is accessible to the rest of the component. Final <code class=\"language-text\">Store.js</code> should look like below.</p>\n<h3 id=\"connect-component-to-store\" style=\"position:relative;\"><a href=\"#connect-component-to-store\" aria-label=\"connect component to store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect Component to Store</h3>\n<p>In order to connect a component to the Store, it will need to be wrapped by <code class=\"language-text\">withTreble</code>.  The <code class=\"language-text\">withTreble</code> function takes an options object parameter.  You will need to add a <code class=\"language-text\">store</code> property and pass the Store to it. Once this is set up the wrapped component and its children components will have access to the Scoped Store.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Store<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./scoped-store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> SomeComp <span class=\"token operator\">=</span> <span class=\"token function\">withTreble</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>store<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SomeComp<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"subscribing-to-multiple-stores\" style=\"position:relative;\"><a href=\"#subscribing-to-multiple-stores\" aria-label=\"subscribing to multiple stores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribing to Multiple Stores</h3>\n<p>If your component is utilizing a Scoped Store there still might be a scenario where your component needs to subscribe to the App's global Store as well. All that needs to be done in this scenario is to import the default <code class=\"language-text\">useTreble</code> hook and destructure the state objects.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Store<span class=\"token punctuation\">,</span> useScopedStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./scoped-store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>someState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>someScopedState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useScopedStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> SomeComp <span class=\"token operator\">=</span> <span class=\"token function\">withTreble</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>store<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SomeComp<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"updating-multiple-stores\" style=\"position:relative;\"><a href=\"#updating-multiple-stores\" aria-label=\"updating multiple stores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating Multiple Stores</h3>\n<p>This can easily be accomplished by giving the useTreble <code class=\"language-text\">Store</code> object an unique name.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Store<span class=\"token punctuation\">,</span> useScopedStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./scoped-store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>someState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>someScopedState<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ScopedStore<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useScopedStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> SomeComp <span class=\"token operator\">=</span> <span class=\"token function\">withTreble</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>store<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SomeComp<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now your component has a Scoped Store and you can subscribe and update this state like you would with the App's gobal Store.  Can you feel the power?! ‚ö°‚ö°‚ö°</p>","excerpt":"Creating complex React components like widgets can make state hard to maintain.  Especially when there are many nested components that need‚Ä¶","frontmatter":{"date":"2021-01-01","path":"/api/advanced/scoping-stores","title":"Scoping Stores","subMenu":[{"text":"","path":"#"}]}}},"pageContext":{}},"staticQueryHashes":["2047183331","2047183331","3649515864","764694655","764694655"]}