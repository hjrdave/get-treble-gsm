{"componentChunkName":"component---src-components-templates-api-docs-api-docs-jsx","path":"/api/introduction/managing-state","result":{"data":{"site":{"siteMetadata":{"apiNavLinks":[{"id":0,"menuItems":[{"id":0,"path":"/api/introduction/what-is-treblegsm","text":"What is TrebleGSM?"},{"id":1,"path":"/api/introduction/getting-started","text":"Getting Started"},{"id":2,"path":"/api/introduction/managing-state","text":"Managing State"}],"section":"Introduction"},{"id":1,"menuItems":[{"id":3,"path":"/api/advanced/how-treble-gsm-works","text":"How TrebleGSM Works"},{"id":4,"path":"/api/advanced/core-concepts","text":"Core Concepts"},{"id":5,"path":"/api/advanced/extending-stores","text":"Extending Stores"},{"id":6,"path":"/api/advanced/scoping-stores","text":"Scoping Stores"},{"id":7,"path":"/api/advanced/persisting-state","text":"Persisting State"},{"id":8,"path":"/api/advanced/managing-lists","text":"Managing Lists"},{"id":9,"path":"/api/advanced/class-support","text":"Class Support"}],"section":"Advanced"},{"id":2,"menuItems":[{"id":10,"path":"/api/middleware/what-is-middleware","text":"What is Middleware?"},{"id":11,"path":"/api/middleware/middleware-data-object","text":"Middleware Data Object"}],"section":"Middleware"},{"id":3,"menuItems":[{"id":12,"path":"/api/modules/what-are-modules","text":"What are Modules?"},{"id":13,"path":"/api/modules/create-a-module","text":"Create a Module"},{"id":14,"path":"/api/modules/api-reference","text":"API Reference"}],"section":"Modules"},{"id":4,"menuItems":[{"id":15,"path":"/api/references/treble-gsm","text":"TrebleGSM"},{"id":16,"path":"/api/references/treble-core","text":"Treble Core"},{"id":17,"path":"/api/references/treble-persist","text":"Treble Persist"},{"id":18,"path":"/api/references/treble-list-manager","text":"Treble List Manager"}],"section":"API References"}]}},"markdownRemark":{"html":"<p>Once TrebleGSM  is setup in your app, we want our components to subscribe to the Store. TrebleGSM has a simple and straightforward API for subscribing to a Store.</p>\n<h3 id=\"subscribe-with-the-usetreble-hook\" style=\"position:relative;\"><a href=\"#subscribe-with-the-usetreble-hook\" aria-label=\"subscribe with the usetreble hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribe with the <code class=\"language-text\">useTreble</code> Hook</h3>\n<p>Every component that is nested in the <code class=\"language-text\">Treble</code> provider has access to the <code class=\"language-text\">useTreble</code> hook. This hook is used to perform CRUD operations on Store state. </p>\n<p>Import <code class=\"language-text\">useTreble</code> into your component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a destructured array to get access to Store state.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>pokemon<span class=\"token punctuation\">,</span> pokemonTrainer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can now use each store item in your component like you would with local state.</p>\n<blockquote>\n<p>Hooks <strong>MUST</strong> be called inside functional components. For more information read <a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<h3 id=\"update-state-with-storeupdate\" style=\"position:relative;\"><a href=\"#update-state-with-storeupdate\" aria-label=\"update state with storeupdate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update State with <code class=\"language-text\">Store.update</code></h3>\n<p>Treble provides a simple and straightforward way to update state. The second array item <code class=\"language-text\">useTreble</code> returns is the Store subscribe object. This object has various methods for manipulating Store state.</p>\n<p>To access the <code class=\"language-text\">Store</code> object we can destructure it from the <code class=\"language-text\">useTreble</code> hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>pokemon<span class=\"token punctuation\">,</span> pokemonTrainer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Store</code> object has an <code class=\"language-text\">update</code> method that overwrites the existing Store Item state with a new one.</p>\n<p>Updating state example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>useTreble<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>pokemon<span class=\"token punctuation\">,</span> pokemonTrainer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Store<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charizard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Update State<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>pokemon<span class=\"token punctuation\">}</span> is the Pokemon <span class=\"token keyword\">of</span> <span class=\"token punctuation\">{</span>pokemonTrainer<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token comment\">//Pikachu is the Pokemon of Ash => Charizard is the Pokemon of Ash </span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And tada your app now has global state management and is easily managed. Happy Coding! ðŸ’»</p>","excerpt":"Once TrebleGSM  is setup in your app, we want our components to subscribe to the Store. TrebleGSM has a simple and straightforward API forâ€¦","frontmatter":{"date":"2021-01-01","path":"/api/introduction/managing-state","title":"Managing State","subMenu":[{"text":"","path":"#"}]}}},"pageContext":{}},"staticQueryHashes":["2047183331","2047183331","3649515864","764694655","764694655"]}