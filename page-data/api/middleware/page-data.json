{"componentChunkName":"component---src-templates-post-template-jsx","path":"/api/middleware","result":{"data":{"markdownRemark":{"html":"<p>Middleware provides a way for 3rd party functions to be called after state is dispatched and before it is saved back to the Store. You can use it for calling API's, logging, transforming state, or even to check dispatched state values before they are updated in the Store. This is a very powerful feature when dealing with global state and allows for a lot of possibilities. </p>\n<p>Treble can take three types of middleware functions <code class=\"language-text\">call</code>, <code class=\"language-text\">check</code>, and <code class=\"language-text\">process</code>.  Each are declared as a <code class=\"language-text\">features</code> property in a Store object.</p>\n<blockquote>\n<p><strong>Middleware Firing Order</strong><br>\nThough the middleware types are independent of each other, they do have a firing order after state is dispatched. The <code class=\"language-text\">call</code> middleware type is asyncronous and will fire immediately.  The <code class=\"language-text\">check</code> middleware type fires right after state is dispatched. Once <code class=\"language-text\">check</code> runs then the <code class=\"language-text\">process</code> middlware type will fire. Each can run independent of each other.</p>\n</blockquote>\n<h4 id=\"call\" style=\"position:relative;\"><a href=\"#call\" aria-label=\"call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Call</h4>\n<p>The <code class=\"language-text\">call</code> middleware takes a function that will be fired as soon as the state is dispatched.  The dispatched state can be passed to the <code class=\"language-text\">call</code> function, but that is optional.  Some use cases for this middleware could be to call an external API, logging, or routing.</p>\n<p>In the example below a <code class=\"language-text\">call</code> middleware function is declared.  Everytime state is dispatched the <code class=\"language-text\">call</code> middlware will output the state to the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pokemon<span class=\"token operator\">:</span> <span class=\"token string\">'Charizard'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        features<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">call</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"check\" style=\"position:relative;\"><a href=\"#check\" aria-label=\"check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check</h4>\n<p>The <code class=\"language-text\">check</code> middleware takes a function that will return a boolean value based on a <code class=\"language-text\">state</code> validation (hence the name check). Think of it as a state gatekeeper that only allows state to pass if it meets certain criteria. If the state value does not pass the <code class=\"language-text\">check</code> middleware function's criteria then it returns false and the dispatch is canceled.  Which means the Store will not be updated. </p>\n<p>In the example below we have a <code class=\"language-text\">check</code> middleware function that checks to see if the state value equals the string <code class=\"language-text\">&#39;Pikachu&#39;</code>. If the state value ever equals <code class=\"language-text\">&#39;Pikachu&#39;</code> then the state will not be updated to the Store.  Thus keeping those pesky Pikachus out of our Store.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pokemon<span class=\"token operator\">:</span> <span class=\"token string\">'Charizard'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        features<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">check</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!==</span> <span class=\"token string\">'Pikachu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"process\" style=\"position:relative;\"><a href=\"#process\" aria-label=\"process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h4>\n<p>The <code class=\"language-text\">process</code> middleware takes a function that processes or transforms the dispatched state to something else and then outputs the processed state to the Store.</p>\n<p>In the example below the <code class=\"language-text\">process</code> middleware function prepends a string to the dispatched state and then outputs it to the Store.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> pokemon<span class=\"token operator\">:</span> <span class=\"token string\">'Charizard'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        features<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function-variable function\">process</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Mega </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If the dispatched state value is say <code class=\"language-text\">&#39;Mewtwo&#39;</code> then it will be updated to the Store as <code class=\"language-text\">&#39;Mega Mewtwo&#39;</code>.</p>\n<h4 id=\"disable-middleware\" style=\"position:relative;\"><a href=\"#disable-middleware\" aria-label=\"disable middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disable Middleware</h4>\n<p>In some cases you might want to bypass the Middleware pipeline when updating global state. This is easily done by adding the <code class=\"language-text\">disableMiddleware</code> property to the option parameter of the <code class=\"language-text\">Store.update</code> method and setting it's value to <code class=\"language-text\">true</code>. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Store<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Pikachu'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> disableMiddleware<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"Middleware provides a way for 3rd party functions to be called after state is dispatched and before it is saved back to the Store. You can…","frontmatter":{"date":"2020-03-06","path":"/api/middleware","title":"Middleware","subMenu":[{"text":"Call","path":"#call"},{"text":"Check","path":"#check"},{"text":"Process","path":"#process"},{"text":"Disable Middleware","path":"#disable-middleware"}]}}},"pageContext":{}}}