{"componentChunkName":"component---src-components-templates-api-docs-api-docs-jsx","path":"/api/middleware/what-is-middleware","result":{"data":{"site":{"siteMetadata":{"apiNavLinks":[{"id":0,"menuItems":[{"id":0,"path":"/api/introduction/what-is-treblegsm","text":"What is TrebleGSM?"},{"id":1,"path":"/api/introduction/getting-started","text":"Getting Started"},{"id":2,"path":"/api/introduction/managing-state","text":"Managing State"}],"section":"Introduction"},{"id":1,"menuItems":[{"id":3,"path":"/api/advanced/how-treble-gsm-works","text":"How TrebleGSM Works"},{"id":4,"path":"/api/advanced/core-concepts","text":"Core Concepts"},{"id":5,"path":"/api/advanced/extending-stores","text":"Extending Stores"},{"id":6,"path":"/api/advanced/scoping-stores","text":"Scoping Stores"},{"id":7,"path":"/api/advanced/persisting-state","text":"Persisting State"},{"id":8,"path":"/api/advanced/managing-lists","text":"Managing Lists"},{"id":9,"path":"/api/advanced/class-support","text":"Class Support"}],"section":"Advanced"},{"id":2,"menuItems":[{"id":10,"path":"/api/middleware/what-is-middleware","text":"What is Middleware?"},{"id":11,"path":"/api/middleware/middleware-data-object","text":"Middleware Data Object"}],"section":"Middleware"},{"id":3,"menuItems":[{"id":12,"path":"/api/modules/what-are-modules","text":"What are Modules?"},{"id":13,"path":"/api/modules/create-a-module","text":"Create a Module"},{"id":14,"path":"/api/modules/api-reference","text":"API Reference"}],"section":"Modules"},{"id":4,"menuItems":[{"id":15,"path":"/api/references/treble-gsm","text":"TrebleGSM"},{"id":16,"path":"/api/references/treble-core","text":"Treble Core"},{"id":17,"path":"/api/references/treble-persist","text":"Treble Persist"},{"id":18,"path":"/api/references/treble-list-manager","text":"Treble List Manager"}],"section":"API References"}]}},"markdownRemark":{"html":"<p>Middleware provides a way to centralize state logic and automate tasks when updating state in the Store. Middleware functions will fire before state reaches the Store and automatically has access to Store data, dispatched state data, and subscribe methods. Middleware can be used for calling API’s, logging, transforming state, comparing dispatched state against conditions, and even updating other state items! This is a very powerful feature that allows for a lot of possibilities.</p>\n<h3 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h3>\n<p>Middleware functions are Store Item specific. Meaning they only affect the state they have been specified for. They can be set to a state by using the <code class=\"language-text\">features</code> property in a Store Item.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">features<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This runs before the Store is updated'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"middleware-types\" style=\"position:relative;\"><a href=\"#middleware-types\" aria-label=\"middleware types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware Types</h3>\n<p>TrebleGSM has 4 types of middleware: <code class=\"language-text\">log</code>, <code class=\"language-text\">check</code>, <code class=\"language-text\">process</code>, and <code class=\"language-text\">callback</code>. Each of these middleware types have a specific purpose and firing order. </p>\n<h3 id=\"firing-order\" style=\"position:relative;\"><a href=\"#firing-order\" aria-label=\"firing order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Firing Order</h3>\n<p>All middleware types are independent of each other. Despite this they do have a firing order that is important to take advantage of as you use them in development. As soon as state is dispatched the middleware pipeline is started.  </p>\n<p><em>Priority 1</em> - <code class=\"language-text\">log</code> is an asynchronous side effect and runs immediately.<br>\n<em>Priority 1</em> - <code class=\"language-text\">check</code> runs immediately after state is dispatched.<br>\n<em>Priority 2</em> - <code class=\"language-text\">process</code> runs after <code class=\"language-text\">check</code> resolves to <code class=\"language-text\">true</code>.<br>\n<em>Priority 3</em> - <code class=\"language-text\">callback</code> is a side effect that runs after <code class=\"language-text\">process</code> resolves.</p>\n<p>As soon as all middleware functions resolve (except <code class=\"language-text\">log</code>), then the state will update the Store.</p>\n<h3 id=\"disabling-middleware\" style=\"position:relative;\"><a href=\"#disabling-middleware\" aria-label=\"disabling middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disabling Middleware</h3>\n<p>If there is a circumstance where you do not want the middleware pipeline to run when updating the Store you can easily disable it from a dispatch call (this will only disable middleware for the targeted state and only for the specified dispatch).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Store<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jigglypuff'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> disableMiddleware<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"other-middleware-types\" style=\"position:relative;\"><a href=\"#other-middleware-types\" aria-label=\"other middleware types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Middleware Types</h3>\n<p>TrebleGSM has a couple special middleware types that work apart from the middleware pipeline.</p>\n<p><code class=\"language-text\">run</code> -  An asynchronous side effect similar to <code class=\"language-text\">log</code> but only runs when it is called by the Store method <code class=\"language-text\">Store.run</code>. It is a way to centralize Store logic without having to update state.  </p>\n<p><code class=\"language-text\">payloadListener</code> - An asynchronous side effect that can be used to examine the payload sent to the Store. This middleware is often used by modules to examine dispatch payload data. These middleware types <strong>cannot</strong> be disabled by dispatch methods. </p>","excerpt":"Middleware provides a way to centralize state logic and automate tasks when updating state in the Store. Middleware functions will fire…","frontmatter":{"date":"2021-01-01","path":"/api/middleware/what-is-middleware","title":"What is Middleware","subMenu":[{"text":"","path":"#"}]}}},"pageContext":{}},"staticQueryHashes":["2047183331","2047183331","3649515864","764694655","764694655"]}