{"componentChunkName":"component---src-templates-post-template-jsx","path":"/api/scoped-global-state","result":{"data":{"markdownRemark":{"html":"<p>Creating complex React components like widgets can make state hard to maintain.  Especially when there are many nested components that need to pass state data to each other. Treble was created with the idea that the best part of React is it's component architecture. Putting local state into global state can defeat the purpose of working with components. With this in mind Treble has a way to scope global state to a component.</p>\n<p>Imagine having a data grid component that displays rows and has search functionality.  The data grid has a main component which is made up of a table header row, data rows, and search inputs.  Each one of those are seperate components that live within the main component.  They all need to share some state and pass data between each other.  If only local state is used, then prop drilling and lifting up state create a component full of spagetti code.  If the state is put into the App's global state then you have a bunch of state that is only used by one component which bloats your App's global state. With scoped global state we can set up a Store within a component that will only allow that component and it's nested components to subscribe to it. Allowing the component to be what it was meant to be... a component!</p>\n<h4 id=\"create-scoped-store\" style=\"position:relative;\"><a href=\"#create-scoped-store\" aria-label=\"create scoped store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Scoped Store</h4>\n<p>To create a scoped global state in our component a new instance of React Context will need to be created.</p>\n<blockquote>\n<p>Treble uses React's native <a href=\"https://reactjs.org/docs/context.html\">Context API</a> to manage global state under the hood. This means each instance of the Treble container has to utilize a unique instance of React Context. When no custom Context is passed to Treble it utilizes its default Context instance.  Scoped Treble components need a custom Context to work correctly.</p>\n</blockquote>\n<p>Create a <code class=\"language-text\">Store.js</code> file in the desired component folder structure. You can learn more about creating a Treble Store by going <a href=\"/api/setup#treble-store\">here</a>. Along with our state object array parameter, an object with the options property will need to be added to the <code class=\"language-text\">createStore()</code> function as a second parameter. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> <span class=\"token comment\">//scoped context</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can create a new Context instance by importing the <code class=\"language-text\">useScopedTreble</code> hook into the Store. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In your <code class=\"language-text\">Store.js</code> file assign <code class=\"language-text\">useScopedTreble</code> to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pass the <code class=\"language-text\">scopedContext</code> variable to the <code class=\"language-text\">Store</code> component's <code class=\"language-text\">options.context</code> property.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> scopedContext\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span> </code></pre></div>\n<p>The Store is now a scoped Store.</p>\n<h4 id=\"create-scoped-usetreble-hook\" style=\"position:relative;\"><a href=\"#create-scoped-usetreble-hook\" aria-label=\"create scoped usetreble hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Scoped useTreble Hook</h4>\n<p>Now that a scoped Store is set up, a custom useTreble hook must be created.  This hook will only subscribe to this scoped Store.</p>\n<p>Import the <code class=\"language-text\">useTreble</code> hook into <code class=\"language-text\">Store.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a new custom hook variable and pass the <code class=\"language-text\">scopedContext</code> variable to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useNewTreble</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span>scopedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>You can call the new hook anything you want, <strong>BUT</strong> it must start with <em>use</em>. See <a href=\"https://reactjs.org/docs/hooks-custom.html\">Building Your Own Hooks</a></p>\n</blockquote>\n<p>You will then need to export the custom Hook from your <code class=\"language-text\">Store.js</code> file so it is accessible to the rest of the component. Final <code class=\"language-text\">Store.js</code> should look like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//scoped store</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> useScopedTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> scopedContext <span class=\"token operator\">=</span> <span class=\"token function\">useScopedTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useNewTreble</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span>scopedContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">{</span>\n        action<span class=\"token operator\">:</span> <span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            trainer<span class=\"token operator\">:</span> <span class=\"token string\">'Ash'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token operator\">:</span> scopedContext\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> useNewTreble <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Store<span class=\"token punctuation\">;</span> </code></pre></div>\n<h4 id=\"wrap-treble-container-around-components\" style=\"position:relative;\"><a href=\"#wrap-treble-container-around-components\" aria-label=\"wrap treble container around components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrap Treble Container Around Components</h4>\n<p>This step is the same as setting up a normal Treble container.  The only difference is the scoped <code class=\"language-text\">Store</code> component will be passed to the <code class=\"language-text\">Treble</code> component's <code class=\"language-text\">store</code> prop.  To set up the Treble container <a href=\"./setup-treble\">read here</a>.</p>\n<h4 id=\"subscribe-to-store\" style=\"position:relative;\"><a href=\"#subscribe-to-store\" aria-label=\"subscribe to store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribe to Store</h4>\n<p>This is the same as subscribing to the main <code class=\"language-text\">Store.js</code>. The difference is you will call the custom hook <code class=\"language-text\">useNewTreble</code> instead of the default <code class=\"language-text\">useTreble</code> hook. To subscribe to the Treble Store <a href=\"./subscribe-and-update\">read here</a>.</p>\n<h4 id=\"subscribing-to-multiple-stores\" style=\"position:relative;\"><a href=\"#subscribing-to-multiple-stores\" aria-label=\"subscribing to multiple stores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribing to Multiple Stores</h4>\n<p>If your component is utilizing scoped global state there still might be a scenario where your component needs to subscribe to the App's global state as well. All that needs to be done in this scenario is to import the default <code class=\"language-text\">useTreble</code> hook and destructure the state objects. Example below.\n.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useNewTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NestedComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useNewTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">          \n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> is the Pokemon Trainer </span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token plain-text\">'s favorite Pokemon</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Pikachu is the Pokemon Trainer Ash's favorite Pokemon */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NestedComp<span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"updating-multiple-stores\" style=\"position:relative;\"><a href=\"#updating-multiple-stores\" aria-label=\"updating multiple stores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating Multiple Stores</h4>\n<p>This can easily be accomplished by giving the <code class=\"language-text\">dispatch</code> function a unique name, and passing that function to the appropriate <code class=\"language-text\">updateStore</code> function. Example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemonTrainer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useNewTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Misty'</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">updateStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemonTrainer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Psyduck'</span><span class=\"token punctuation\">,</span> dispatch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now your component has scoped global state and you can subscribe and update this state like you would with the App's gobal state.  Can you feel the power?!</p>","excerpt":"Creating complex React components like widgets can make state hard to maintain.  Especially when there are many nested components that need…","frontmatter":{"date":"May 04, 2019","path":"/api/scoped-global-state","title":"Scoped Global State","subMenu":[{"text":"Create Scoped Store","path":"#create-scoped-store"},{"text":"Create Scoped useTreble Hook","path":"#create-scoped-usetreble-hook"},{"text":"Subscribing to Multiple Stores","path":"#subscribing-to-multiple-stores"},{"text":"Updating Multiple Stores","path":"#updating-multiple-stores"}]}}},"pageContext":{}}}