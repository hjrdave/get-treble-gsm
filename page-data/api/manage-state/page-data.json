{"componentChunkName":"component---src-templates-post-template-jsx","path":"/api/manage-state","result":{"data":{"markdownRemark":{"html":"<p>Once global state is setup in your app, we will want our components to be able to read and manipulate the state from the Store. Treble has a simple and straightforward API for subscribing to and updating state in the Store.</p>\n<h4 id=\"subscribing-to-the-store-with-usetreble\" style=\"position:relative;\"><a href=\"#subscribing-to-the-store-with-usetreble\" aria-label=\"subscribing to the store with usetreble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribing to the Store with useTreble</h4>\n<p>Every component that is wrapped inside the <code class=\"language-text\">Treble</code> container component has access to the <code class=\"language-text\">useTreble</code> hook. This hook is used to get access to state variables from the Store. </p>\n<p>First we need to import the <code class=\"language-text\">useTreble</code> hook into our component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useTreble <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'treble-gsm'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assign <code class=\"language-text\">useTreble</code> to a destructured array to get access to store variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon<span class=\"token punctuation\">,</span> pokemonGame <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can now use each store variable in your component like you would with local state.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{ pokemon } can be found in { pokemonGame }<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Mewtwo can be found in Pokemon Red --></span></code></pre></div>\n<blockquote>\n<p>Hooks <strong>MUST</strong> be called inside functional components. For more information read <a href=\"https://reactjs.org/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<h4 id=\"updating-state-with-storeupdate\" style=\"position:relative;\"><a href=\"#updating-state-with-storeupdate\" aria-label=\"updating state with storeupdate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating State with Store.update</h4>\n<p>Treble provides a simple and straightforward <strong>SubscribeAPI</strong> with the <code class=\"language-text\">Store</code> object.</p>\n<p>To get access to the <strong>SubscribeAPI</strong> <code class=\"language-text\">Store</code> object we can destructure it from the <code class=\"language-text\">useTreble</code> hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> pokemon<span class=\"token punctuation\">,</span> pokemonGame <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTreble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Store</code> object has an <code class=\"language-text\">update</code> method that overwrites the existing Store Item state with a new one.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Store<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> dispatchValue<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Updating state example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Store<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updatePokemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mew'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  Update Pokemon\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> pokemon <span class=\"token punctuation\">}</span><span class=\"token plain-text\"> can be found in </span><span class=\"token punctuation\">{</span> pokemonGame <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Mew can be found <span class=\"token keyword\">in</span> Pokemon Red <span class=\"token operator\">--</span><span class=\"token operator\">></span></code></pre></div>\n<p>And tada your app now has global state management and is easily managed. Happy Coding!</p>\n<blockquote>\n<p><strong>TrebleGSM V2 updateStore deprecation</strong><br>\nThe <code class=\"language-text\">updateStore</code> function will be deprecated in TrebleGSM V2 in favor of the new <a href=\"/api/subscribe-api\">SubcribeAPI</a>. This new api is available as an experimental feature in V1.3.0. TrebleGSM V2 will remove <code class=\"language-text\">updateStore</code> completely in favor of the new API. For <code class=\"language-text\">updateStore</code> api documentation go <a href=\"http://localhost:8000/api/deprecated#update-store\">here</a>.</p>\n</blockquote>","excerpt":"Once global state is setup in your app, we will want our components to be able to read and manipulate the state from the Store. Treble has aâ€¦","frontmatter":{"date":"2019-05-04","path":"/api/manage-state","title":"Manage State","subMenu":[{"text":"Subscribing to Store","path":"#subscribing-to-the-store-with-usetreble"},{"text":"Updating State","path":"#updating-state-with-storeupdate"}]}}},"pageContext":{}}}